//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TryIt.electiveLocationBasedServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="electiveLocationBasedServices.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WindIntensity", ReplyAction="http://tempuri.org/IService1/WindIntensityResponse")]
        decimal WindIntensity(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WindIntensity", ReplyAction="http://tempuri.org/IService1/WindIntensityResponse")]
        System.Threading.Tasks.Task<decimal> WindIntensityAsync(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SolarIntensity", ReplyAction="http://tempuri.org/IService1/SolarIntensityResponse")]
        decimal SolarIntensity(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SolarIntensity", ReplyAction="http://tempuri.org/IService1/SolarIntensityResponse")]
        System.Threading.Tasks.Task<decimal> SolarIntensityAsync(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/nearestAirport", ReplyAction="http://tempuri.org/IService1/nearestAirportResponse")]
        string[][] nearestAirport(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/nearestAirport", ReplyAction="http://tempuri.org/IService1/nearestAirportResponse")]
        System.Threading.Tasks.Task<string[][]> nearestAirportAsync(decimal latitude, decimal longitude);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/location2zip", ReplyAction="http://tempuri.org/IService1/location2zipResponse")]
        string[] location2zip(string cityName, string stateCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/location2zip", ReplyAction="http://tempuri.org/IService1/location2zipResponse")]
        System.Threading.Tasks.Task<string[]> location2zipAsync(string cityName, string stateCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TryIt.electiveLocationBasedServices.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TryIt.electiveLocationBasedServices.IService1>, TryIt.electiveLocationBasedServices.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public decimal WindIntensity(decimal latitude, decimal longitude) {
            return base.Channel.WindIntensity(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<decimal> WindIntensityAsync(decimal latitude, decimal longitude) {
            return base.Channel.WindIntensityAsync(latitude, longitude);
        }
        
        public decimal SolarIntensity(decimal latitude, decimal longitude) {
            return base.Channel.SolarIntensity(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<decimal> SolarIntensityAsync(decimal latitude, decimal longitude) {
            return base.Channel.SolarIntensityAsync(latitude, longitude);
        }
        
        public string[][] nearestAirport(decimal latitude, decimal longitude) {
            return base.Channel.nearestAirport(latitude, longitude);
        }
        
        public System.Threading.Tasks.Task<string[][]> nearestAirportAsync(decimal latitude, decimal longitude) {
            return base.Channel.nearestAirportAsync(latitude, longitude);
        }
        
        public string[] location2zip(string cityName, string stateCode) {
            return base.Channel.location2zip(cityName, stateCode);
        }
        
        public System.Threading.Tasks.Task<string[]> location2zipAsync(string cityName, string stateCode) {
            return base.Channel.location2zipAsync(cityName, stateCode);
        }
    }
}
